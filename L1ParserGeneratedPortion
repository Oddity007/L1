static const uint8_t rule_string_1[2] = {27, 25, };
static const uint8_t rule_string_2[4] = {22, 1, 9, 27, };
static const uint8_t rule_string_3[5] = {22, 16, 1, 9, 27, };
static const uint8_t rule_string_4[1] = {30, };
static const uint8_t rule_string_5[1] = {31, };
static const uint8_t rule_string_6[1] = {28, };
static const uint8_t rule_string_7[1] = {29, };
static const uint8_t rule_string_8[1] = {32, };
static const uint8_t rule_string_9[1] = {33, };
static const uint8_t rule_string_10[3] = {33, 21, 33, };
static const uint8_t rule_string_11[3] = {33, 21, 33, };
static const uint8_t rule_string_12[2] = {14, 33, };
static const uint8_t rule_string_13[3] = {34, 14, 33, };
static const uint8_t rule_string_14[5] = {1, 3, 33, 9, 27, };
static const uint8_t rule_string_15[6] = {1, 34, 3, 33, 9, 27, };
static const uint8_t rule_string_16[6] = {16, 1, 3, 33, 9, 27, };
static const uint8_t rule_string_17[7] = {16, 1, 34, 3, 33, 9, 27, };
static const uint8_t rule_string_18[5] = {33, 13, 33, 9, 27, };
static const uint8_t rule_string_19[3] = {33, 12, 32, };
static const uint8_t rule_string_20[3] = {33, 12, 33, };
static const uint8_t rule_string_21[2] = {23, 33, };
static const uint8_t rule_string_22[2] = {24, 2, };
static const uint8_t rule_string_23[2] = {36, 35, };
static const uint8_t rule_string_24[2] = {36, 34, };
static const uint8_t rule_string_25[1] = {36, };
static const uint8_t rule_string_26[2] = {36, 34, };
static const uint8_t rule_string_27[1] = {36, };
static const uint8_t rule_string_28[3] = {16, 1, 35, };
static const uint8_t rule_string_29[2] = {16, 1, };
static const uint8_t rule_string_30[1] = {37, };
static const uint8_t rule_string_31[2] = {19, 1, };
static const uint8_t rule_string_32[2] = {20, 36, };
static const uint8_t rule_string_33[1] = {1, };
static const uint8_t rule_string_34[1] = {0, };
static const uint8_t rule_string_35[1] = {2, };
static const uint8_t rule_string_36[3] = {4, 27, 5, };
static const uint8_t rule_string_37[2] = {6, 7, };
static const uint8_t rule_string_38[5] = {6, 38, 18, 33, 7, };
static const uint8_t rule_string_39[3] = {6, 38, 7, };
static const uint8_t rule_string_40[3] = {33, 8, 38, };
static const uint8_t rule_string_41[2] = {33, 8, };
static const uint8_t rule_string_42[1] = {33, };
static const uint8_t rule_string_43[1] = {0};
static const void* HandleAction(L1Parser* parser, const void* arguments[], Rule rule)
{
	switch(rule.action)
	{
		case 0:{return arguments[0];} break;
		case 1:{return CreateDeclareNode(parser, arguments[1], arguments[3], false);} break;
		case 2:{return CreateDeclareNode(parser, arguments[2], arguments[4], true);} break;
		case 3:{return CreateOptionNode(parser, arguments[0], arguments[2]);} break;
		case 4:{return CreateAnonymousFunctionNode(parser, NULL, arguments[1]);} break;
		case 5:{return CreateAnonymousFunctionNode(parser, arguments[0], arguments[2]);} break;
		case 6:{return CreateAssignmentNode(parser, arguments[0], NULL,  arguments[2], arguments[4], false);} break;
		case 7:{return CreateAssignmentNode(parser, arguments[0], arguments[1], arguments[3], arguments[5], false);} break;
		case 8:{return CreateAssignmentNode(parser, arguments[1], NULL,  arguments[3], arguments[5], true);} break;
		case 9:{return CreateAssignmentNode(parser, arguments[1], arguments[2],  arguments[4], arguments[6], true);} break;
		case 10:{return CreateConstraintNode(parser, arguments[0], arguments[2], arguments[4]);} break;
		case 11:{return CreateInlineConstraintNode(parser, arguments[0], arguments[2]);} break;
		case 12:{return CreateConstructNode(parser, arguments[1]);} break;
		case 13:{return CreateImportNode(parser, arguments[1]);} break;
		case 14:{return CreateMetacallNode(parser, arguments[0], arguments[1]);} break;
		case 15:{return CreateCallNode(parser, arguments[0], arguments[1]);} break;
		case 16:{return Cons(parser, arguments[0], arguments[1]);} break;
		case 17:{return Cons(parser, arguments[0], NULL);} break;
		case 18:{return Cons(parser, arguments[1], arguments[2]);} break;
		case 19:{return Cons(parser, arguments[1], NULL);} break;
		case 20:{return CreateAnyNode(parser, arguments[1]);} break;
		case 21:{return CreateEvalNode(parser, arguments[1]);} break;
		case 22:{return arguments[1];} break;
		case 23:{return CreateListNode(parser, NULL, NULL);} break;
		case 24:{return CreateListNode(parser, arguments[1], arguments[3]);} break;
		case 25:{return CreateListNode(parser, arguments[1], NULL);} break;
		case 26:{return Cons(parser, arguments[0], arguments[2]);} break;
		case 27:{return NULL;} break;
		default: return NULL;
	}
	return NULL;
}
static const Rule Rules[] = {{rule_string_1, 26, 2, 0}, {rule_string_2, 27, 4, 1}, {rule_string_3, 27, 5, 2}, {rule_string_4, 27, 1, 0}, {rule_string_5, 27, 1, 0}, {rule_string_6, 27, 1, 0}, {rule_string_7, 27, 1, 0}, {rule_string_8, 27, 1, 0}, {rule_string_9, 27, 1, 0}, {rule_string_10, 28, 3, 3}, {rule_string_11, 28, 3, 3}, {rule_string_12, 29, 2, 4}, {rule_string_13, 29, 3, 5}, {rule_string_14, 30, 5, 6}, {rule_string_15, 30, 6, 7}, {rule_string_16, 30, 6, 8}, {rule_string_17, 30, 7, 9}, {rule_string_18, 31, 5, 10}, {rule_string_19, 32, 3, 11}, {rule_string_20, 32, 3, 11}, {rule_string_21, 33, 2, 12}, {rule_string_22, 33, 2, 13}, {rule_string_23, 33, 2, 14}, {rule_string_24, 33, 2, 15}, {rule_string_25, 33, 1, 0}, {rule_string_26, 34, 2, 16}, {rule_string_27, 34, 1, 17}, {rule_string_28, 35, 3, 18}, {rule_string_29, 35, 2, 19}, {rule_string_30, 36, 1, 0}, {rule_string_31, 37, 2, 20}, {rule_string_32, 37, 2, 21}, {rule_string_33, 37, 1, 0}, {rule_string_34, 37, 1, 0}, {rule_string_35, 37, 1, 0}, {rule_string_36, 37, 3, 22}, {rule_string_37, 37, 2, 23}, {rule_string_38, 37, 5, 24}, {rule_string_39, 37, 3, 25}, {rule_string_40, 38, 3, 26}, {rule_string_41, 38, 2, 17}, {rule_string_42, 38, 1, 17}, {rule_string_43, 38, 0, 27}, };
static const uint8_t ProgramSymbol = 26;
static const uint8_t RuleCount = 43;

