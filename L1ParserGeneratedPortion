static const uint8_t rule_string_1[2] = {24, 22, };
static const uint8_t rule_string_2[1] = {27, };
static const uint8_t rule_string_3[1] = {28, };
static const uint8_t rule_string_4[1] = {25, };
static const uint8_t rule_string_5[1] = {26, };
static const uint8_t rule_string_6[1] = {29, };
static const uint8_t rule_string_7[1] = {30, };
static const uint8_t rule_string_8[3] = {30, 21, 30, };
static const uint8_t rule_string_9[3] = {30, 21, 30, };
static const uint8_t rule_string_10[3] = {31, 14, 30, };
static const uint8_t rule_string_11[5] = {1, 3, 30, 9, 24, };
static const uint8_t rule_string_12[6] = {1, 31, 3, 30, 9, 24, };
static const uint8_t rule_string_13[6] = {16, 1, 3, 30, 9, 24, };
static const uint8_t rule_string_14[7] = {16, 1, 31, 3, 30, 9, 24, };
static const uint8_t rule_string_15[5] = {30, 13, 30, 9, 24, };
static const uint8_t rule_string_16[3] = {30, 12, 30, };
static const uint8_t rule_string_17[2] = {33, 32, };
static const uint8_t rule_string_18[2] = {33, 31, };
static const uint8_t rule_string_19[1] = {33, };
static const uint8_t rule_string_20[2] = {33, 31, };
static const uint8_t rule_string_21[1] = {33, };
static const uint8_t rule_string_22[3] = {16, 1, 32, };
static const uint8_t rule_string_23[2] = {16, 1, };
static const uint8_t rule_string_24[1] = {34, };
static const uint8_t rule_string_25[2] = {19, 1, };
static const uint8_t rule_string_26[1] = {1, };
static const uint8_t rule_string_27[1] = {0, };
static const uint8_t rule_string_28[1] = {2, };
static const uint8_t rule_string_29[3] = {4, 24, 5, };
static const uint8_t rule_string_30[2] = {6, 7, };
static const uint8_t rule_string_31[5] = {6, 35, 18, 30, 7, };
static const uint8_t rule_string_32[3] = {6, 35, 7, };
static const uint8_t rule_string_33[3] = {30, 8, 35, };
static const uint8_t rule_string_34[2] = {30, 8, };
static const uint8_t rule_string_35[1] = {30, };
static const uint8_t rule_string_36[1] = {0};
static const void* HandleAction(L1Parser* parser, const void* arguments[], Rule rule)
{
	switch(rule.action)
	{
		case 0:{return arguments[0];} break;
		case 1:{return CreateOptionNode(parser, arguments[0], arguments[2]);} break;
		case 2:{return CreateAnonymousFunctionNode(parser, arguments[0], arguments[2]);} break;
		case 3:{return CreateAssignmentNode(parser, arguments[0], NULL,  arguments[2], arguments[4], false);} break;
		case 4:{return CreateAssignmentNode(parser, arguments[0], arguments[1], arguments[3], arguments[5], false);} break;
		case 5:{return CreateAssignmentNode(parser, arguments[1], NULL,  arguments[3], arguments[5], true);} break;
		case 6:{return CreateAssignmentNode(parser, arguments[1], arguments[2],  arguments[4], arguments[6], true);} break;
		case 7:{return CreateConstraintNode(parser, arguments[0], arguments[2], arguments[4]);} break;
		case 8:{return CreateInlineConstraintNode(parser, arguments[0], arguments[2]);} break;
		case 9:{return CreateMetacallNode(parser, arguments[0], arguments[1]);} break;
		case 10:{return CreateCallNode(parser, arguments[0], arguments[1]);} break;
		case 11:{return Cons(parser, arguments[0], arguments[1]);} break;
		case 12:{return Cons(parser, arguments[0], NULL);} break;
		case 13:{return Cons(parser, arguments[1], arguments[2]);} break;
		case 14:{return Cons(parser, arguments[1], NULL);} break;
		case 15:{return CreateAnyNode(parser, arguments[1]);} break;
		case 16:{return arguments[1];} break;
		case 17:{return CreateListNode(parser, NULL, NULL);} break;
		case 18:{return CreateListNode(parser, arguments[1], arguments[3]);} break;
		case 19:{return CreateListNode(parser, arguments[1], NULL);} break;
		case 20:{return Cons(parser, arguments[0], arguments[2]);} break;
		case 21:{return NULL;} break;
		default: return NULL;
	}
	return NULL;
}
static const Rule Rules[] = {{rule_string_1, 23, 2, 0}, {rule_string_2, 24, 1, 0}, {rule_string_3, 24, 1, 0}, {rule_string_4, 24, 1, 0}, {rule_string_5, 24, 1, 0}, {rule_string_6, 24, 1, 0}, {rule_string_7, 24, 1, 0}, {rule_string_8, 25, 3, 1}, {rule_string_9, 25, 3, 1}, {rule_string_10, 26, 3, 2}, {rule_string_11, 27, 5, 3}, {rule_string_12, 27, 6, 4}, {rule_string_13, 27, 6, 5}, {rule_string_14, 27, 7, 6}, {rule_string_15, 28, 5, 7}, {rule_string_16, 29, 3, 8}, {rule_string_17, 30, 2, 9}, {rule_string_18, 30, 2, 10}, {rule_string_19, 30, 1, 0}, {rule_string_20, 31, 2, 11}, {rule_string_21, 31, 1, 12}, {rule_string_22, 32, 3, 13}, {rule_string_23, 32, 2, 14}, {rule_string_24, 33, 1, 0}, {rule_string_25, 34, 2, 15}, {rule_string_26, 34, 1, 0}, {rule_string_27, 34, 1, 0}, {rule_string_28, 34, 1, 0}, {rule_string_29, 34, 3, 16}, {rule_string_30, 34, 2, 17}, {rule_string_31, 34, 5, 18}, {rule_string_32, 34, 3, 19}, {rule_string_33, 35, 3, 20}, {rule_string_34, 35, 2, 12}, {rule_string_35, 35, 1, 12}, {rule_string_36, 35, 0, 21}, };
static const uint8_t ProgramSymbol = 23;
static const uint8_t RuleCount = 36;

