static const uint8_t rule_string_1[2] = {24, 22, };
static const uint8_t rule_string_2[1] = {29, };
static const uint8_t rule_string_3[1] = {28, };
static const uint8_t rule_string_4[1] = {30, };
static const uint8_t rule_string_5[3] = {31, 21, 30, };
static const uint8_t rule_string_6[3] = {31, 12, 30, };
static const uint8_t rule_string_7[3] = {32, 14, 30, };
static const uint8_t rule_string_8[3] = {32, 15, 30, };
static const uint8_t rule_string_9[5] = {30, 10, 30, 9, 24, };
static const uint8_t rule_string_10[4] = {30, 10, 9, 24, };
static const uint8_t rule_string_11[4] = {30, 10, 30, 9, };
static const uint8_t rule_string_12[5] = {30, 3, 30, 9, 24, };
static const uint8_t rule_string_13[5] = {30, 13, 30, 9, 24, };
static const uint8_t rule_string_14[1] = {25, };
static const uint8_t rule_string_15[1] = {27, };
static const uint8_t rule_string_16[1] = {26, };
static const uint8_t rule_string_17[1] = {31, };
static const uint8_t rule_string_18[2] = {33, 32, };
static const uint8_t rule_string_19[1] = {33, };
static const uint8_t rule_string_20[2] = {33, 32, };
static const uint8_t rule_string_21[1] = {33, };
static const uint8_t rule_string_22[1] = {1, };
static const uint8_t rule_string_23[1] = {0, };
static const uint8_t rule_string_24[1] = {2, };
static const uint8_t rule_string_25[3] = {4, 24, 5, };
static const uint8_t rule_string_26[2] = {6, 7, };
static const uint8_t rule_string_27[5] = {6, 34, 18, 31, 7, };
static const uint8_t rule_string_28[3] = {6, 34, 7, };
static const uint8_t rule_string_29[2] = {19, 33, };
static const uint8_t rule_string_30[3] = {30, 8, 34, };
static const uint8_t rule_string_31[2] = {30, 8, };
static const uint8_t rule_string_32[1] = {30, };
static const uint8_t rule_string_33[1] = {0};
static const void* HandleAction(L1Parser* parser, const void* arguments[], Rule rule)
{
	switch(rule.action)
	{
		case 0:{return arguments[0];} break;
		case 1:{return CreateOptionNode(parser, arguments[0], arguments[2]);} break;
		case 2:{return CreateConstructorConstraintNode(parser, arguments[0], arguments[2]);} break;
		case 3:{return CreateAnonymousFunctionNode(parser, arguments[0], arguments[2], false);} break;
		case 4:{return CreateAnonymousFunctionNode(parser, arguments[0], arguments[2], true);} break;
		case 5:{return CreateBranchNode(parser, arguments[0], arguments[2], arguments[4]);} break;
		case 6:{return CreateBranchNode(parser, arguments[0], NULL, arguments[3]);} break;
		case 7:{return CreateBranchNode(parser, arguments[0], arguments[2], NULL);} break;
		case 8:{return CreateAssignmentNode(parser, arguments[0], arguments[2], arguments[4], false);} break;
		case 9:{return CreateAssignmentNode(parser, arguments[0], arguments[2], arguments[4], true);} break;
		case 10:{return CreateCallNode(parser, arguments[0], arguments[1]);} break;
		case 11:{return Cons(parser, arguments[0], arguments[1]);} break;
		case 12:{return Cons(parser, arguments[0], NULL);} break;
		case 13:{return arguments[1];} break;
		case 14:{return CreateListNode(parser, NULL, NULL);} break;
		case 15:{return CreateListNode(parser, arguments[1], arguments[3]);} break;
		case 16:{return CreateListNode(parser, arguments[1], NULL);} break;
		case 17:{return CreateEvalNode(parser, arguments[1]);} break;
		case 18:{return Cons(parser, arguments[0], arguments[2]);} break;
		case 19:{return NULL;} break;
		default: return NULL;
	}
	return NULL;
}
static const Rule Rules[] = {{rule_string_1, 23, 2, 0}, {rule_string_2, 24, 1, 0}, {rule_string_3, 24, 1, 0}, {rule_string_4, 24, 1, 0}, {rule_string_5, 25, 3, 1}, {rule_string_6, 26, 3, 2}, {rule_string_7, 27, 3, 3}, {rule_string_8, 27, 3, 4}, {rule_string_9, 28, 5, 5}, {rule_string_10, 28, 4, 6}, {rule_string_11, 28, 4, 7}, {rule_string_12, 29, 5, 8}, {rule_string_13, 29, 5, 9}, {rule_string_14, 30, 1, 0}, {rule_string_15, 30, 1, 0}, {rule_string_16, 30, 1, 0}, {rule_string_17, 30, 1, 0}, {rule_string_18, 31, 2, 10}, {rule_string_19, 31, 1, 0}, {rule_string_20, 32, 2, 11}, {rule_string_21, 32, 1, 12}, {rule_string_22, 33, 1, 0}, {rule_string_23, 33, 1, 0}, {rule_string_24, 33, 1, 0}, {rule_string_25, 33, 3, 13}, {rule_string_26, 33, 2, 14}, {rule_string_27, 33, 5, 15}, {rule_string_28, 33, 3, 16}, {rule_string_29, 33, 2, 17}, {rule_string_30, 34, 3, 18}, {rule_string_31, 34, 2, 12}, {rule_string_32, 34, 1, 12}, {rule_string_33, 34, 0, 19}, };
static const uint8_t ProgramSymbol = 23;
static const uint8_t RuleCount = 33;

