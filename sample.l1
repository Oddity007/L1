fix = __import "fix";
fix :: (a = '_; (a -> a) -> a);

nat = fix
(
	'nat -> 
	(
		.zero = __construct [];
		.successor ('x : nat) = __construct [x];
		zero | successor 'x
	)
);


asdf = (('x) -> (nat.zero));

factorial = fix
(
	'f ->
	(
		((nat.zero) -> (nat.successor) (nat.zero))
		| (('sx : (nat.successor) 'x) -> (nat.multiply) (sx) (f x))
	)
);

map 'f [] = [];
map 'f ['x ... 'xs] = [f x ... map f xs];

map
