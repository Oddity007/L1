//* = __universe 0;
//id = (a : *) -> a;
//idt = (a : *) => *;
//id : idt

/*(
	(x : #universe 0)
	->
	x
)*/

/*
#enum nats
{
	zero :: nats,
	succ :: (x : nats) => nats
}
*/

/*
nats ::
{
	zero :: nats;
	succ :: (_ : nats) => nats;
}
*/

/*
#adt nats
(
	zero :: 
)
*/

/*branch
	= 0 -> a -> b -> a
	& 1 -> a -> b -> b;*/
* = #universe 0;
const = (T : *) -> (a : T) -> (b : T) -> a;
id = (a : *) -> a;
id //: (a : *) => *

/*__letrec map f = 
	[] -> [] &
	[x, ...xs] -> [f x, ... map f xs];
__let nats = {zero, succ (x : __self)};
*/
