__declare map;
map f [] = [];
id x = x;
map f ['x ... 'xs] = [f x ... map f xs];
__declare any;
any f ['x ... 'xs] = (f x | any f xs);
monad m = 
(
	(
		a b ->
		(
			m.unit :: m a;
			m.bind :: ($(m a) ($a -> m b) -> m b);
			m
		)
	) :: (a b -> m);
	m
);
//foo (a : b : c) = [a, b, c];
__declare nat;
nat =
(
	.zero = __construct [];
	.succ (x : nat) = __construct [x];
	(zero | succ ('x : nat))
);
map
